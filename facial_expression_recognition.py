# -*- coding: utf-8 -*-
"""facial_expression_recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VS21m2cg2RFbZppRe9Fg6oPAHsenBmJF
"""

!git clone https://github.com/muxspace/facial_expressions.git

# creating dictonary with keys as expression and value as list of expression
import csv
data = {}
with open('/content/facial_expressions/data/legend.csv') as f:
  reader = csv.reader(f) # reader object reads data row by row
  next(reader) # to skip column headers
  for row in reader:
    key = row[2].lower()
    # add value (image) to corresponding key
    if key in data:
      data[key].append(row[1])
    # make key value pair if not present
    else:
      data[key] = [row[1]]

emotion_list = list(data.keys())
emotion_list

# creating training and testing directory
import os

os.mkdir('master_data')
os.mkdir('master_data/training')
os.mkdir('master_data/testing')

# creating directories for each emotion in training and testing
for emotion in emotion_list:
  os.mkdir(os.path.join('master_data/training/', emotion))
  os.mkdir(os.path.join('master_data/testing/', emotion))

# copying images to created directories
from shutil import copyfile
split_size = 0.8

for emotion, images in data.items():
  # splitting images into train and test
  train_size = int(split_size*len(images))
  train_images = images[:train_size]
  test_images = images[train_size:]
  for image in train_images:
    source = os.path.join('/content/facial_expressions/images', image)
    dest = os.path.join('/content/master_data/training', emotion, image)
    copyfile(source, dest)
  for image in test_images:
    source = os.path.join('/content/facial_expressions/images', image)
    dest = os.path.join('/content/master_data/testing', emotion, image)
    copyfile(source, dest)

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten

# model
model = tf.keras.models.Sequential([
      Conv2D(16, (3,3), activation='relu', input_shape = (100, 100, 3)),
      MaxPooling2D(2, 2),
      Conv2D(32, (3,3), activation='relu'),
      MaxPooling2D(2, 2),
      Conv2D(64, (3,3), activation='relu'),
      MaxPooling2D(2, 2),
      Flatten(),
      Dense(1024, activation='relu'),
      Dense(8, activation='softmax')
])
model.compile(optimizer = Adam(learning_rate = 0.01), loss = 'categorical_crossentropy', metrics = ['acc'])
model.summary()

# generate array from images, generate lables from directory name and to 1 hot encode them
train_dir = '/content/master_data/training'
test_dir = '/content/master_data/testing'

train_datagen = ImageDataGenerator(rescale = 1.0/255)
train_generator = train_datagen.flow_from_directory(
                                                    train_dir,
                                                    target_size = (100, 100),
                                                    class_mode = 'categorical',
                                                    batch_size = 64
                                                  )

test_datagen = ImageDataGenerator(rescale = 1.0/255)
test_generator = test_datagen.flow_from_directory(
                                                    test_dir,
                                                    target_size = (100, 100),
                                                    class_mode = 'categorical',
                                                    batch_size = 64
                                                  )

# early stopping model if acc is not improving in next 2 epochs
es = EarlyStopping(monitor='val_acc', patience = 2, min_delta=0.01)

model.fit(train_generator,
          epochs = 10,
          verbose = 1,
          validation_data = test_generator,
          callbacks = [es])